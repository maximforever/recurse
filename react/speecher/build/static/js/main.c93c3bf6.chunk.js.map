{"version":3,"sources":["Word.js","Gameboard.js","InputForm.js","AuthorGuesser.js","Speecher.js","App.js","serviceWorker.js","index.js"],"names":["Word","styling","this","props","word","includes","react_default","a","createElement","className","onClick","handleClick","Component","Gameboard","_this","displayWords","i","answerWords","length","remainingWords","emptyWord","display","replace","actualWord","push","guessedWord","category","toUpperCase","money","map","id","Math","floor","random","src_Word","key","buyWord","InputForm","value","placeholder","onChange","handleInput","AuthorGuesser","name","renderButton","options","Speecher","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","takeAGuess","event","guess","target","trim","state","slice","allWordsGuessed","filter","newMoneyBalance","setState","currentGuess","guessAuthor","console","log","answer","author","authorGuessed","error","selectRandomQuote","quote","editedQuote","newQuote","split","chars","lastLetter","indexOf","substring","separatePunctuation","_this2","fetch","then","res","json","jres","categories","keys","contents","randomCategory","url","concat","quotes","body","stripPunctuation","catch","err","getLocalQuote","quoteLibrary","array","numberOfChoices","incorrectChoices","correctAnswerIndex","selectedAnswers","randomAnswerIndex","splice","newRemainingWords","remainingWord","_this3","src_Gameboard","src_InputForm","_this4","shuffledAnswers","prepareAnswers","src_AuthorGuesser","gameboard","renderGameboard","guessInput","renderQuoteGuess","authorGuessSection","renderAuthorGuess","victoryMessage","renderVictoryMessage","App","src_Speecher","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c93c3bf6.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Word extends Component {\n\n\trender() {\n\n\t\tlet styling = this.props.word.includes(\"_\") ? \"one-word\" : \"one-word guessed\"\n\n\t\treturn (\n\t\t\t<div className={styling} onClick={this.props.handleClick}> { this.props.word } </div>\n\t\t)\n\t}\n\n}\n\n\nexport default Word","import React, { Component } from 'react';\nimport Word from \"./Word\"\n\n\nclass Gameboard extends Component {\n\n\t\n\n\trender() {\n\n\t\tlet displayWords = [];\n\n\t\tfor(var i = 0; i < this.props.answerWords.length; i++){\n\n\t\t\tlet word = this.props.answerWords[i];\n\n\t\t\tif (this.props.remainingWords.includes(word)){\n\t\t\t\tlet emptyWord = {\n\t\t\t\t\tdisplay: word.replace(/./g, \"_\"),\n\t\t\t\t\tactualWord: word\n\t\t\t\t}\n\t\t\t\tdisplayWords.push(emptyWord);\n\t\t\t} else {\n\t\t\t\tlet guessedWord = {\n\t\t\t\t\tdisplay: word,\n\t\t\t\t\tactualWord: word\n\t\t\t\t}\n\t\t\t\tdisplayWords.push(guessedWord);\n\t\t\t}\n\t\t}\n\n\t\t//console.log(displayWords);\n\n\t\treturn(\n\n\t\t\t<div className=\"game-board\">\n\t\t\t\t\n\t\t\t\t<div className=\"category\">Category: {this.props.category.toUpperCase()}</div>\n\n\t\t\t\t<div className=\"money\">You have <span className=\"money-count\">${this.props.money}</span></div>\n\t\t\t\t\n\t\t\t\t<div className=\"rules\">\n\t\t\t\t\tYou get $100 for each letter in a word you guess correctly.\n\t\t\t\t\t<br/>Click on a word to buy it for $100/letter. \n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"game-board-wrapper\">\n\t\t\t\t\t{displayWords.map((word) => {\n\t\t\t\t\t\tlet chars = \"1234567890\";\n\t\t\t\t\t\tlet id = \"\";\n\n\t\t\t\t\t\tfor(let i = 0; i < 8; i++){\n\t\t\t\t\t\t\tid += chars[Math.floor(Math.random()*chars.length)];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn (<Word key={id} handleClick={() => this.props.buyWord(word.actualWord)} word={word.display} />)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t)\n\t}\n}\n\nexport default Gameboard;","import React, { Component } from 'react';\n\nclass InputForm extends Component {\n\n\n\n\n\n\trender(){\n\n\t\treturn (\n\t\t\t<div className=\"input-form\">\n\t\t\t\t<input value={this.props.value} placeholder = \"take a guess...\" onChange={this.props.handleInput} />\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\nexport default InputForm;","import React, {Component} from 'react';\n\nclass AuthorGuesser extends Component {\n\n\trenderButton(name){\n\t\treturn <button className=\"author-button\" onClick={() => this.props.handleClick(name)}>{name}</button>\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div className = \"author-guesser\">\n\t\t\t\t<p>Nice job! now... can you guess the author?</p>\n\t\t\t\t{this.renderButton(this.props.options[0])}\n\t\t\t\t{this.renderButton(this.props.options[1])}\n\t\t\t\t{this.renderButton(this.props.options[2])}\n\t\t\t\t{this.renderButton(this.props.options[3])}\n\t\t\t</div>\n\t\t)\n\t\t\n\t}\n}\n\n\nexport default AuthorGuesser;","// main game component\n\nimport React, { Component } from 'react';\n\nimport Gameboard from './Gameboard'\nimport InputForm from './InputForm'\nimport AuthorGuesser from './AuthorGuesser'\n\n\nclass Speecher extends Component {\n\n  \tconstructor(props){\n    \tsuper(props);\n    \t\n    \tthis.state = {\n    \t\tmoney: 1000,\n    \t\tallWordsGuessed: false,\n    \t\tauthorGuessed: false,\n    \t\tcurrentGuess: \"\",\n    \t\tanswer: \"\",\n    \t\tanswerWords: [],\n    \t\tremainingWords: [],\n        error: \"\"\n    \t}\n\n    \tthis.selectRandomQuote();\n\n  \t}\n\n\n  \ttakeAGuess = (event) =>  {\n\n  \t\tlet guess = event.target.value.trim();\n\n  \t\tif(this.state.remainingWords.includes(guess) && this.state.answerWords.includes(guess)){\n  \t\t\t// used guessed a word!\n  \t\t\tlet remainingWords = this.state.remainingWords.slice();\n\n  \t\t\tremainingWords = remainingWords.filter((word) => {\n  \t\t\t\treturn word !== guess\n  \t\t\t});\n\n  \t\t\tlet allWordsGuessed = (remainingWords.length) ? false : true;\n  \t\t\tlet newMoneyBalance = this.state.money + guess.trim().length * 100;\n\n  \t\t\tthis.setState({\n  \t\t\t\tremainingWords: remainingWords,\n  \t\t\t\tcurrentGuess: \"\",\n  \t\t\t\tallWordsGuessed: allWordsGuessed,\n  \t\t\t\tmoney: newMoneyBalance\n  \t\t\t})\n  \t\t} else {\n\n\t  \t\tthis.setState({\n\t      \t\tcurrentGuess: guess\n\t    \t})\n  \t\t}\n\n\n\n    \t\n  \t}\n\n\n  \tseparatePunctuation(quote){\n\n  \t\tlet editedQuote = [];\n\t\tlet newQuote = quote.split(\" \");\n\t\tlet chars = [\".\", \",\", \"!\", \"?\", \":\", \";\"];\n\n\t\tfor(var i = 0; i < newQuote.length; i++){\n\t\t\tlet word = newQuote[i];\n\t\t\tlet lastLetter = word[word.length - 1];\n\t\t\tif(chars.indexOf(lastLetter) !== -1){\n\t\t\t\teditedQuote.push(word.substring(0, word.length - 1), lastLetter)\n\t\t\t} else {\n\t\t\t\teditedQuote.push(word);\n\t\t\t}\n\t\t}\n\n\t\treturn editedQuote;\n  \t}\n\n  \tstripPunctuation(quote){\n\n  \t\tlet chars = [\".\", \",\", \"!\", \"?\", \":\", \";\"];\n\t  \tlet quoteArray = this.separatePunctuation(quote);\n\n  \t\treturn quoteArray.filter((word) => {\n  \t\t\treturn !chars.includes(word)\n  \t\t})\n\n\n  \t}\n\n  \tselectRandomQuote(){\n    \t\n\n      this.state.error = \"\";\n\n  \t\tfetch('http://quotes.rest/qod/categories.json')\n  \t\t.then(res => res.json())\n  \t\t.then(jres => {\n  \t\t\tlet categories = Object.keys(jres.contents.categories);\n  \t\t\tlet randomCategory = categories[Math.floor(Math.random() * categories.length)];\n\n  \t\t\treturn randomCategory;\n  \t\t})\n  \t\t.then(randomCategory => {\n  \t\t\tlet url = `http://quotes.rest/qod.json?category=${randomCategory}`;\n  \t\t\tconsole.log(url);\n  \t\t\treturn fetch(url)\n  \t\t}) \n\t\t.then(res => res.json())\n\t\t.then(jres => {\n  \t\t\tconsole.log(jres.contents.quotes[0].quote);\n\n\n\n  \t\t\tconst quote = {\n  \t\t\t\t\"body\": jres.contents.quotes[0].quote.replace(/’/gi, \"'\"),\n  \t\t\t\t\"author\": jres.contents.quotes[0].author,\n  \t\t\t\t\"category\": jres.contents.quotes[0].category\n  \t\t\t}\n\n\t\t\t this.setState({\n\t    \t\tanswer: quote,\n\t     \t\tanswerWords: this.separatePunctuation(quote.body),\n\t     \t\tremainingWords: this.stripPunctuation(quote.body)\n\t    \t})\n\n  \t\t})\n  \t\t\n  \t\t.catch(err => {\n  \t\t\tconsole.log(\"looks like there's an issue...\");\n  \t\t\tconsole.log(err);\n        //this.state.error = err;\n\t  \t\t// this.selectRandomQuote()\t\t// this is just... asking for trouble.\n        \n        // the API has a limit of 10 requests an hour, which is not great. \n        // So, if this fails, I should set a quote from a local backup\n\n        this.getLocalQuote();\n\n  \t\t})\n    \t\n  \t}\n\n    getLocalQuote(){\n      let quote = quoteLibrary[Math.floor((Math.random()*quoteLibrary.length))];\n\n      this.setState({\n          category: \"General\",\n          answer: quote,\n          answerWords: this.separatePunctuation(quote.body),\n          remainingWords: this.stripPunctuation(quote.body)\n      })\n    }\n\n  \tprepareAnswers(answer, array, numberOfChoices){\n\n  \t\tif(numberOfChoices > (array + 1)){\n  \t\t\tconsole.log(\"Can't have more choices than options\");\n  \t\t\treturn null;\n  \t\t}\n\n  \t\tlet incorrectChoices = array.slice();\t\t\t// make a copy of the array so we don't mutate the state\n  \t\tlet correctAnswerIndex = Math.floor(Math.random() * numberOfChoices);\n\n  \t\tlet selectedAnswers = [];\n\n  \t\tfor(let i = 0; i < numberOfChoices; i++){\n  \t\t\tif(i === correctAnswerIndex){\n  \t\t\t\tselectedAnswers.push(answer);\n  \t\t\t} else {\n  \t\t\t\tlet randomAnswerIndex = Math.floor(Math.random() * incorrectChoices.length);\n  \t\t\t\tselectedAnswers.push(incorrectChoices[randomAnswerIndex]);\n  \t\t\t\tincorrectChoices.splice(randomAnswerIndex, 1);\t\t// remove choice from array\n  \t\t\t}\n  \t\t}\n\n\n\n  \t\treturn selectedAnswers;\n  \t}\n\n  \tbuyWord(word){\n  \t\tif(this.state.money >= word.length * 100 && this.state.remainingWords.includes(word)){\n\n  \t\t\tlet newMoneyBalance = this.state.money - word.length * 100;\n  \t\t\tlet newRemainingWords = this.state.remainingWords.filter((remainingWord) => {\n  \t\t\t\treturn remainingWord !== word\n  \t\t\t});\n\n\n  \t\t\tthis.setState({\n  \t\t\t\tmoney: newMoneyBalance,\n  \t\t\t\tremainingWords: newRemainingWords\n  \t\t\t})\n\n  \t\t}\n  \t}\n\n  \tguessAuthor = (name) => {\n  \t\tconsole.log(this.state.answer.author);\n  \t\tconsole.log(name);\n  \t\tif(this.state.answer.author === name){\n  \t\t\tconsole.log(\"Yay, that's right!\");\n  \t\t\tthis.setState({\n  \t\t\t\tauthorGuessed: true\n  \t\t\t})\n  \t\t}\n  \t}\n\n  \trenderGameboard(){\n\n  \t\tif(this.state.answer.length === 0){\n  \t\t\treturn <p>Loading...</p>\n  \t\t} else if (this.state.error.length){\n        return (\n          <div className = \"error\">\n            <p>Looks like something went wrong - try again in an hour!</p>\n            <pre>{this.state.error}</pre>\n          </div>\n        )\n      } else {\n  \t\t\treturn(<Gameboard \n\t\t\t\tmoney={this.state.money} \n\t\t\t\tcategory={this.state.answer.category} \n\t\t\t\tanswerWords={this.state.answerWords} \n\t\t\t\tremainingWords={this.state.remainingWords} \n\t\t\t\tbuyWord={(word) => this.buyWord(word)}\n\t\t\t/>)\n  \t\t}\n  \t\t\n  \t}\n\n  \trenderQuoteGuess(){\n  \t\treturn(\n  \t\t\t<InputForm \n\t\t\t\tvalue={this.state.currentGuess} \n\t\t\t\thandleInput={this.takeAGuess} \n\t\t\t/>\n  \t\t)\n  \t}\n\n  \trenderAuthorGuess(){\n  \t\tlet otherAnswers = [\"Arnold Schwarzenegger\", \"Ghandi\", \"JK Rowling\", \"Desmond Tutu\", \"Barack Obama\", \"Nelson Mandela\", \"Albert Einstein\"];\n  \t\tlet numberOfChoices = 4;\n  \t\tlet shuffledAnswers = this.prepareAnswers(this.state.answer.author, otherAnswers, numberOfChoices);\n\n  \t\treturn(\n  \t\t\t<AuthorGuesser options={shuffledAnswers} handleClick={(name) => this.guessAuthor(name)}/>\n  \t\t)\n  \t}\n\n  \trenderVictoryMessage(){\n  \t\treturn(\n  \t\t\t<div className=\"victory-message\">\n\t  \t\t\t<h1>\n\t  \t\t\t\t<i className=\"fas fa-star\"></i>\n\t  \t\t\t\t<i className=\"fas fa-star\"></i>\n\t  \t\t\t\t<i className=\"fas fa-star\"></i>\n\t  \t\t\t\t<div className=\"victory-message-hooray\">You got it!</div>\n\t  \t\t\t</h1>\n\t  \t\t\t\n\t  \t\t\t<div className=\"quote-wrapper\">\n\t  \t\t\t\t<h3 className=\"quote\">{this.state.answer.body}</h3>\n\t  \t\t\t\t<h4 className=\"quote-author\">~ {this.state.answer.author}</h4>\n\t  \t\t\t</div>\n\t  \t\t</div>\n  \t\t)\n  \t}\n\n\n\trender(){\n\n\t\tlet gameboard = (!this.state.authorGuessed) ? this.renderGameboard() : null;\n\t\tlet guessInput = (!this.state.allWordsGuessed && !this.state.authorGuessed) ? this.renderQuoteGuess() : null;\n\t\tlet authorGuessSection = (this.state.allWordsGuessed && !this.state.authorGuessed) ? this.renderAuthorGuess() : null;\n\t\tlet victoryMessage = (this.state.allWordsGuessed && this.state.authorGuessed) ? this.renderVictoryMessage() : null;\n\n\t\t// is this the best way to conditionally render a bunch of sections?\n\n\t\treturn(\n\t\t\t<div className=\"speecher\">\n\t\t\t\t<h1><i className=\"fas fa-microphone-alt\"></i> Say What!?</h1>\n\t\t\t\t\n\n\t\t\t\t{gameboard}\n\t\t\t\t{guessInput}\n\t\t\t\t{authorGuessSection}\n\t\t\t\t{victoryMessage}\n\t\t\t\t\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\n// some seed quotes for testing\n\nlet quoteLibrary = [\n  {\n    body: \"In three words I can sum up everything I've learned about life : it goes on\",\n    author: \"Robert Frost\"\n  },\n  {\n    body: \"The irony of commitment is that it's deeply liberating - in work, in play, in love\",\n    author: \"Anne Morris\"\n  },\n\n  {\n    body: \"Do what you feel in your heart to be right - for you'll be criticized anyway\",\n    author: \"Eleanor Roosevelt\"\n  },\n\n  {\n    body: \"Life is a succession of lessons which must be lived to be understood\",\n    author: \"Ralph Waldo Emerson\"\n  },\n\n  {\n    body: \"Life is a succession of lessons which must be lived to be understood\",\n    author: \"Ralph Waldo Emerson\"\n  },\n\n  {\n    body: \"Life is a succession of lessons which must be lived to be understood\",\n    author: \"Ralph Waldo Emerson\"\n  },\n\n  {\n    body: \"The secret of getting ahead is getting started\",\n    author: \"Mark Twain\"\n  },\n\n  {\n    body: \"Try to be a rainbow in someone's cloud\",\n    author: \"Maya Angelou\"\n  }\n\n]\n\n\n\n\nexport default Speecher;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Speecher from './Speecher'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Speecher />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}